# Class to procesess TBF data into meaningful averages

import numpy as np
import re, os, sys
import pandas as pd

class TBFData:

    # Static data

    # Number of fields that should be contained by the raw data

    Nfields = 74

    # Raw data pipe length (can be set with the setL method)

    L = 16.0

    # Raw data pipe radius (can be set with the setR method)

    R = 0.5

    # Bulk Reynolds number

    Re = 5300.0

    # Shear Reynolds number based on the radius

    Re_tau = 360.0

    # Streamwise averaging range (can be set with the setRange method)

    z1 = 0.0
    z2 = L

    # Mass density (can be set with the setRho method)

    rho = 1.0

    # Initialize and load data from .npz file which is generated by TBFAverage

    def __init__(self, fileName):

        rawData = np.load(fileName)

        self.datar = rawData['r']
        self.dataz = rawData['z']
        self.data = rawData['data']

        if self.data.shape[2] != self.Nfields:
            raise ValueError('The shape of the averaged data array is incorrect.')

    # Function to set the length of the pipe

    def setL(self,L):

        self.L = L

    # Function to set the radius of the pipe

    def setR(self,R):

        self.R = R

    # Function to set the streamwise averaging range

    def setRange(self,z1,z2):

        self.z1 = z1
        self.z2 = z2

    # Set the mass density

    def setRho(self,rho):

        self.rho = rho

    # Named access to each column of the data

    ## f

    def f(self):
        return np.maximum(self.mean(self.data[...,0]),1e-16)

    ## df/dj

    def dfda(self):
        return self.mean(self.data[...,1])

    def dfdr(self):
        return self.mean(self.data[...,2])

    def dfdt(self):
        return self.mean(self.data[...,3]) # zero

    ## f*ui

    def fua(self):
        return self.mean(self.data[...,4])

    def fur(self):
        return self.mean(self.data[...,5])

    def fut(self):
        return self.mean(self.data[...,6]) # zero

    ## f*ui*uj

    def fuaua(self):
        return self.mean(self.data[...,7])

    def fuaur(self):
        return self.mean(self.data[...,8])

    def fuaut(self):
        return self.mean(self.data[...,9])

    def furur(self):
        return self.mean(self.data[...,10])

    def furut(self):
        return self.mean(self.data[...,11])

    def futut(self):
        return self.mean(self.data[...,12])

    ## d(f*ui)/dj

    def dfuada(self):
        return self.mean(self.data[...,13])

    def dfurda(self):
        return self.mean(self.data[...,14])

    def dfutda(self):
        return self.mean(self.data[...,15]) # zero

    def dfuadr(self):
        return self.mean(self.data[...,16])

    def dfurdr(self):
        return self.mean(self.data[...,17])

    def dfutdr(self):
        return self.mean(self.data[...,18]) # zero

    def dfuadt(self):
        return self.mean(self.data[...,19]) # zero

    def dfurdt(self):
        return self.mean(self.data[...,20]) # zero

    def dfutdt(self):
        return self.mean(self.data[...,21]) # zero

    ## f*dui/dj

    def fduada(self):
        return self.mean(self.data[...,22])

    def fdurda(self):
        return self.mean(self.data[...,23])

    def fdutda(self):
        return self.mean(self.data[...,24]) # zero

    def fduadr(self):
        return self.mean(self.data[...,25])

    def fdurdr(self):
        return self.mean(self.data[...,26])

    def fdutdr(self):
        return self.mean(self.data[...,27]) # zero

    def fduadt(self):
        return self.mean(self.data[...,28]) # zero

    def fdurdt(self):
        return self.mean(self.data[...,29]) # zero

    def fdutdt(self):
        return self.mean(self.data[...,30]) # zero

    ## d(f*ui*ui)/dj

    def dfuiuida(self):
        return self.mean(self.data[...,31])

    def dfuiuidr(self):
        return self.mean(self.data[...,32])

    def dfuiuidt(self):
        return self.mean(self.data[...,33]) # zero

    ## d(f*ui*uj)/dj

    def dfuaujdj(self):
        return self.mean(self.data[...,34])

    def dfurujdj(self):
        return self.mean(self.data[...,35])

    def dfutujdj(self):
        return self.mean(self.data[...,36])

    ## d(f*ui*ui*uj)/dj

    def dfuiuiujdj(self):
        return self.mean(self.data[...,37])

    ## f*Q

    def fQ(self):
        return self.mean(self.data[...,38])

    ## d(f*Q)/dj

    def dfQda(self):
        return self.mean(self.data[...,39])

    def dfQdr(self):
        return self.mean(self.data[...,40])

    def dfQdt(self):
        return self.mean(self.data[...,41]) # zero

    ## d(f*Q*uj)/dj #1

    def dfQujdj1(self):
        return self.mean(self.data[...,42])

    ## d(f*Q*uj)/dj #2

    def dfQujdj2(self):
        return self.mean(self.data[...,43])

    ## d(f*nu*ui*Sij)/dj #1

    def dfnuuiSijdj1(self):
            return self.mean(self.data[...,44])

    ## d(f*nu*ui*Sij)/dj #2

    def dfnuuiSijdj2(self):
            return self.mean(self.data[...,45])

    ## d(f*nu*Sij)/dj #1

    def dfnuSajdj1(self):
            return self.mean(self.data[...,46])

    def dfnuSrjdj1(self):
            return self.mean(self.data[...,47])

    def dfnuStjdj1(self):
            return self.mean(self.data[...,48])

    ## d(f*nu*Sij)/dj #2

    def dfnuSajdj2(self):
            return self.mean(self.data[...,49])

    def dfnuSrjdj2(self):
            return self.mean(self.data[...,50])

    def dfnuStjdj2(self):
            return self.mean(self.data[...,51])

    ## f*nu*Sij

    def fnuSaa(self):
        return self.mean(self.data[...,52])

    def fnuSar(self):
        return self.mean(self.data[...,53])

    def fnuSat(self):
        return self.mean(self.data[...,54]) # zero

    def fnuSra(self):
        return self.fnuSar()

    def fnuSrr(self):
        return self.mean(self.data[...,55])

    def fnuSrt(self):
        return self.mean(self.data[...,56]) # zero

    def fnuSta(self):
        return self.fnuSat()

    def fnuStr(self):
        return self.fnuSrt()

    def fnuStt(self):
        return self.mean(self.data[...,57]) # zero

    ## f*nu*Sij*dui/dj

    def fnuSijduidj(self):
        return self.mean(self.data[...,58])

    ## f*Tij

    def fTaa(self):
        return self.mean(self.data[...,59])

    def fTar(self):
        return self.mean(self.data[...,60])

    def fTat(self):
        return self.mean(self.data[...,61]) # zero

    def fTra(self):
        return self.fTar()

    def fTrr(self):
        return self.mean(self.data[...,62])

    def fTrt(self):
        return self.mean(self.data[...,63]) # zero

    def fTta(self):
        return self.fTat()

    def fTtr(self):
        return self.fTrt()

    def fTtt(self):
        return self.mean(self.data[...,64]) # zero

    ## rho*Tij*dG/dj

    def rhoTajdGdj(self):
        return self.mean(self.data[...,65])

    def rhoTrjdGdj(self):
        return self.mean(self.data[...,66])

    def rhoTtjdGdj(self):
        return self.mean(self.data[...,67])

    ## rho*Tij*dG/dj*ui

    def rhoTijdGdjui(self):
        return self.mean(self.data[...,68])

    ## f*si

    def fsa(self):
        return self.mean(self.data[...,69])

    def fsr(self):
        return self.mean(self.data[...,70])

    def fst(self):
        return self.mean(self.data[...,71]) # zero

    ## f*ui*si

    def fuisi(self):
        return self.mean(self.data[...,72])

    ## f*f

    def ff(self):
        return self.mean(self.data[...,73])

    # Derived quantities

    def r(self):
        return (self.R-np.flip(self.datar))*self.Re_tau

    def z(self):
        return self.dataz

    def rmsf(self):
        return np.sqrt(self.ff() - self.f()**2)

    def rmsfua(self):
        return np.sqrt(self.fuaua() - self.fua()**2)

    def rmsfur(self):
        return np.sqrt(self.furur() - self.fur()**2)

    def rmsfut(self):
        return np.sqrt(self.futut() - self.fut()**2)

    def fk(self):
        return 0.5*(self.rmsfua()**2 + self.rmsfur()**2 + self.rmsfut()**2)

    def convection(self):

        f = self.f()

        fux = self.fua()
        fuy = self.fur()
        fuz = self.fut()

        fuiui = self.fuaua()+self.furur()+self.futut()

        dfdx = self.dfda()
        dfdy = self.dfdr()
        dfdz = self.dfdt()

        dfuxdx = self.dfuada()
        dfuydx = self.dfurda()
        dfuzdx = self.dfutda()
        dfuxdy = self.dfuadr()
        dfuydy = self.dfurdr()
        dfuzdy = self.dfutdr()
        dfuxdz = self.dfuadt()
        dfuydz = self.dfurdt()
        dfuzdz = self.dfutdt()

        dfuiuidx = self.dfuiuida()
        dfuiuidy = self.dfuiuidr()
        dfuiuidz = self.dfuiuidt()

        return -1/2*(
            1.0/f    * (fux*dfuiuidx + fuy*dfuiuidy + fuz*dfuiuidz) \
          + 1.0/f    * (dfuxdx + dfuydy + dfuzdz) * fuiui \
          - 1.0/f**2 * (fux*dfdx + fuy*dfdy + fuz*dfdz) * fuiui \
          - 1.0/f**2 * (fux*fux + fuy*fuy + fuz*fuz) * (dfuxdx + dfuydy + dfuzdz) \
          - 2.0/f**2 * (fux*fux*dfuxdx + fux*fuy*dfuxdy + fux*fuz*dfuxdz + fuy*fux*dfuydx + fuy*fuy*dfuydy + fuy*fuz*dfuydz + fuz*fux*dfuzdx + fuz*fuy*dfuzdy + fuz*fuz*dfuzdz) \
          + 2.0/f**3 * (fux*fux + fuy*fuy + fuz*fuz) * (fux*dfdx + fuy*dfdy + fuz*dfdz) \
        ) / self.Re_tau

    def production(self):

        f = self.f()

        fux = self.fua()
        fuy = self.fur()
        fuz = self.fut()

        fuxux = self.fuaua()
        fuxuy = self.fuaur()
        fuxuz = self.fuaut()
        fuyux = self.fuaur()
        fuyuy = self.furur()
        fuyuz = self.furut()
        fuzux = self.fuaut()
        fuzuy = self.furut()
        fuzuz = self.futut()

        dfdx = self.dfda()
        dfdy = self.dfdr()
        dfdz = self.dfdt()

        dfuxdx = self.dfuada()
        dfuydx = self.dfurda()
        dfuzdx = self.dfutda()
        dfuxdy = self.dfuadr()
        dfuydy = self.dfurdr()
        dfuzdy = self.dfutdr()
        dfuxdz = self.dfuadt()
        dfuydz = self.dfurdt()
        dfuzdz = self.dfutdt()

        return -(
            (fuxux - fux*fux/f) * (dfuxdx/f - fux*dfdx/f**2) \
          + (fuxuy - fux*fuy/f) * (dfuxdy/f - fux*dfdy/f**2) \
          + (fuxuz - fux*fuz/f) * (dfuxdz/f - fux*dfdz/f**2) \
          + (fuyux - fuy*fux/f) * (dfuydx/f - fuy*dfdx/f**2) \
          + (fuyuy - fuy*fuy/f) * (dfuydy/f - fuy*dfdy/f**2) \
          + (fuyuz - fuy*fuz/f) * (dfuydz/f - fuy*dfdz/f**2) \
          + (fuzux - fuz*fux/f) * (dfuzdx/f - fuz*dfdx/f**2) \
          + (fuzuy - fuz*fuy/f) * (dfuzdy/f - fuz*dfdy/f**2) \
          + (fuzuz - fuz*fuz/f) * (dfuzdz/f - fuz*dfdz/f**2) \
        ) / self.Re_tau

    def transport(self):

        f = self.f()

        fux = self.fua()
        fuy = self.fur()
        fuz = self.fut()

        fuxux = self.fuaua()
        fuxuy = self.fuaur()
        fuxuz = self.fuaut()
        fuyux = self.fuaur()
        fuyuy = self.furur()
        fuyuz = self.furut()
        fuzux = self.fuaut()
        fuzuy = self.furut()
        fuzuz = self.futut()

        fuiui = self.fuaua()+self.furur()+self.futut()

        dfdx = self.dfda()
        dfdy = self.dfdr()
        dfdz = self.dfdt()

        dfuiuiujdj = self.dfuiuiujdj()

        dfuxdx = self.dfuada()
        dfuydx = self.dfurda()
        dfuzdx = self.dfutda()
        dfuxdy = self.dfuadr()
        dfuydy = self.dfurdr()
        dfuzdy = self.dfutdr()
        dfuxdz = self.dfuadt()
        dfuydz = self.dfurdt()
        dfuzdz = self.dfutdt()

        dfuiuidx = self.dfuiuida()
        dfuiuidy = self.dfuiuidr()
        dfuiuidz = self.dfuiuidt()

        dfuxujdj = self.dfuaujdj()
        dfuyujdj = self.dfurujdj()
        dfuzujdj = self.dfutujdj()

        return -(
            0.5*dfuiuiujdj \
          + 1.0/f**2 * (fux*fux + fuy*fuy + fuz*fuz) * (dfuxdx + dfuydy + dfuzdz) \
          + 2.0/f**2 * (fux*fux*dfuxdx + fux*fuy*dfuxdy + fux*fuz*dfuxdz + fuy*fux*dfuydx + fuy*fuy*dfuydy + fuy*fuz*dfuydz + fuz*fux*dfuzdx + fuz*fuy*dfuzdy + fuz*fuz*dfuzdz) \
          - 2.0/f**3 * (fux*fux + fuy*fuy + fuz*fuz) * (fux*dfdx + fuy*dfdy + fuz*dfdz) \
          - 1.0/f    * (fux*dfuxujdj + fuy*dfuyujdj + fuz*dfuzujdj) \
          - 1.0/f    * (fuxux*dfuxdx + fuxuy*dfuxdy + fuxuz*dfuxdz + fuyux*dfuydx + fuyuy*dfuydy + fuyuz*dfuydz + fuzux*dfuzdx + fuzuy*dfuzdy + fuzuz*dfuzdz) \
          + 2.0/f**2 * (fuxux*fux*dfdx + fuyux*fuy*dfdx + fuzux*fuz*dfdx + fuxuy*fux*dfdy + fuyuy*fuy*dfdy + fuzuy*fuz*dfdy + fuxuz*fux*dfdz + fuyuz*fuy*dfdz + fuzuz*fuz*dfdz) \
          - 0.5/f    * (fux*dfuiuidx + fuy*dfuiuidy + fuz*dfuiuidz) \
          - 0.5/f    * (dfuxdx + dfuydy + dfuzdz) * fuiui \
          + 0.5/f**2 * (fux*dfdx + fuy*dfdy + fuz*dfdz) * fuiui \
        ) / self.Re_tau

    def pressureDiffusion(self, mode=1):

        f = self.f()

        fux = self.fua()
        fuy = self.fur()
        fuz = self.fut()

        fQ = self.fQ()

        dfdx = self.dfda()
        dfdy = self.dfdr()
        dfdz = self.dfdt()

        dfuxdx = self.dfuada()
        dfuydy = self.dfurdr()
        dfuzdz = self.dfutdt()

        dfQdx = self.dfQda()
        dfQdy = self.dfQdr()
        dfQdz = self.dfQdt()

        if mode == 1:
            dfQujdj = self.dfQujdj1()
        elif mode == 2:
            dfQujdj = self.dfQujdj2()
        else:
            raise ValueError('Invalid pressure diffusion mode ' + str(mode))

        return -(
            dfQujdj \
          - 1.0/f    * (dfuxdx + dfuydy + dfuzdz) * fQ  \
          - 1.0/f    * (dfQdx*fux + dfQdy*fuy + dfQdz*fuz) \
          + 1.0/f**2 * (dfdx*fux + dfdy*fuy + dfdz*fuz) * fQ \
        ) / self.Re_tau

    def viscousDiffusion(self, mode=1):

        f = self.f()

        fux = self.fua()
        fuy = self.fur()
        fuz = self.fut()

        fnuSxx = self.fnuSaa()
        fnuSxy = self.fnuSar()
        fnuSxz = self.fnuSat()
        fnuSyx = self.fnuSra()
        fnuSyy = self.fnuSrr()
        fnuSyz = self.fnuSrt()
        fnuSzx = self.fnuSta()
        fnuSzy = self.fnuStr()
        fnuSzz = self.fnuStt()

        dfdx = self.dfda()
        dfdy = self.dfdr()
        dfdz = self.dfdt()

        dfuxdx = self.dfuada()
        dfuydx = self.dfurda()
        dfuzdx = self.dfutda()
        dfuxdy = self.dfuadr()
        dfuydy = self.dfurdr()
        dfuzdy = self.dfutdr()
        dfuxdz = self.dfuadt()
        dfuydz = self.dfurdt()
        dfuzdz = self.dfutdt()

        if mode == 1:
            dfuinuSijdj = self.dfnuuiSijdj1()
            dfnuSxjdj = self.dfnuSajdj1()
            dfnuSyjdj = self.dfnuSrjdj1()
            dfnuSzjdj = self.dfnuStjdj1()
        elif mode == 2:
            dfuinuSijdj = self.dfnuuiSijdj2()
            dfnuSxjdj = self.dfnuSajdj2()
            dfnuSyjdj = self.dfnuSrjdj2()
            dfnuSzjdj = self.dfnuStjdj2()
        else:
            raise ValueError('Invalid viscous diffusion mode ' + str(mode))

        return 2.0*(
            dfuinuSijdj \
          - 1.0/f *    (fux*dfnuSxjdj + fuy*dfnuSyjdj + fuz*dfnuSzjdj) \
          - 1.0/f *    (fnuSxx*dfuxdx + fnuSxy*dfuxdy + fnuSxz*dfuxdz + fnuSyx*dfuydx + fnuSyy*dfuydy + fnuSyz*dfuydz + fnuSzx*dfuzdx + fnuSzy*dfuzdy + fnuSzz*dfuzdz) \
          + 1.0/f**2 * (fux*fnuSxx*dfdx + fux*fnuSxy*dfdy + fux*fnuSxz*dfdz + fuy*fnuSyx*dfdx + fuy*fnuSyy*dfdy + fuy*fnuSyz*dfdz + fuz*fnuSzx*dfdx + fuz*fnuSzy*dfdy + fuz*fnuSzz*dfdz) \
        ) / self.Re_tau

    def dissipation(self):

        f = self.f()

        fduxdx = self.fduada()
        fduydx = self.fdurda()
        fduzdx = self.fdutda()
        fduxdy = self.fduadr()
        fduydy = self.fdurdr()
        fduzdy = self.fdutdr()
        fduxdz = self.fduadt()
        fduydz = self.fdurdt()
        fduzdz = self.fdutdt()

        fnuSxx = self.fnuSaa()
        fnuSxy = self.fnuSar()
        fnuSxz = self.fnuSat()
        fnuSyx = self.fnuSra()
        fnuSyy = self.fnuSrr()
        fnuSyz = self.fnuSrt()
        fnuSzx = self.fnuSta()
        fnuSzy = self.fnuStr()
        fnuSzz = self.fnuStt()

        fnuSijduidj = self.fnuSijduidj()

        return 2.0*(
            fnuSijduidj
          - 1.0/f * (fnuSxx*fduxdx + fnuSxy*fduxdy + fnuSxz*fduxdz + fnuSyx*fduydx + fnuSyy*fduydy + fnuSyz*fduydz + fnuSzx*fduzdx + fnuSzy*fduzdy + fnuSzz*fduzdz)
        ) / self.Re_tau

    def interface1(self):

        f = self.f()

        fux = self.fua()
        fuy = self.fur()
        fuz = self.fut()

        rhoTxjdGdj = self.rhoTajdGdj()
        rhoTyjdGdj = self.rhoTrjdGdj()
        rhoTzjdGdj = self.rhoTtjdGdj()

        rhoTijdGdjui = self.rhoTijdGdjui()

        return (
            1.0/f * (fux*rhoTxjdGdj + fuy*rhoTyjdGdj + fuz*rhoTzjdGdj) \
          - rhoTijdGdjui \
        ) / self.Re_tau

    def interface2(self):

        f = self.f()
        fux = self.fua()
        fuy = self.fur()
        fuz = self.fut()

        fTxx = self.fTaa()
        fTxy = self.fTar()
        fTxz = self.fTat()
        fTyx = self.fTra()
        fTyy = self.fTrr()
        fTyz = self.fTrt()
        fTzx = self.fTta()
        fTzy = self.fTtr()
        fTzz = self.fTtt()

        dfdx = self.dfda()
        dfdy = self.dfdr()
        dfdz = self.dfdt()

        dfuxdx = self.dfuada()
        dfuydx = self.dfurda()
        dfuzdx = self.dfutda()
        dfuxdy = self.dfuadr()
        dfuydy = self.dfurdr()
        dfuzdy = self.dfutdr()
        dfuxdz = self.dfuadt()
        dfuydz = self.dfurdt()
        dfuzdz = self.dfutdt()

        fduxdx = self.fduada()
        fduydx = self.fdurda()
        fduzdx = self.fdutda()
        fduxdy = self.fduadr()
        fduydy = self.fdurdr()
        fduzdy = self.fdutdr()
        fduxdz = self.fduadt()
        fduydz = self.fdurdt()
        fduzdz = self.fdutdt()

        return (
            - 1.0/f    * (fTxx*fduxdx + fTxy*fduxdy + fTxz*fduxdz + fTyx*fduydx + fTyy*fduydy + fTyz*fduydz + fTzx*fduzdx + fTzy*fduzdy + fTzz*fduzdz) \
            + 1.0/f    * (fTxx*dfuxdx + fTxy*dfuxdy + fTxz*dfuxdz + fTyx*dfuydx + fTyy*dfuydy + fTyz*dfuydz + fTzx*dfuzdx + fTzy*dfuzdy + fTzz*dfuzdz) \
            - 1.0/f**2 * (fTxx*fux*dfdx + fTxy*fux*dfdy + fTxz*fux*dfdz + fTyx*fuy*dfdx + fTyy*fuy*dfdy + fTyz*fuy*dfdz + fTzx*fuz*dfdx + fTzy*fuz*dfdy + fTzz*fuz*dfdz) \
        ) / self.Re_tau

    def surfaceTension(self):

        f = self.f()

        fux = self.fua()
        fuy = self.fur()
        fuz = self.fut()

        fuisi = self.fuisi()

        fsx = self.fsa()
        fsy = self.fsr()
        fsz = self.fst()

        return (
            fuisi
          - 1.0/f * (fux*fsx + fuy*fsy + fuz*fsz)
        ) / self. Re_tau

    def divergence(self):

        f = self.f()

        dfuxdx = self.dfuada()
        dfuydy = self.dfurdr()
        dfuzdz = self.dfutdt()

        return (dfuxdx + dfuydy + dfuzdz)

    def budgetSum(self, modepd=1, modevd=1):

        return \
          + self.convection() \
          + self.production() \
          + self.transport() \
          - self.dissipation() \
          + self.pressureDiffusion(modepd) \
          + self.viscousDiffusion(modevd) \
          + self.interface1() \
          + self.interface2() \
          + self.surfaceTension()

    # Function to average over given axial range

    def mean(self, data):

        # Don't use data exactly at the inlet or outlet -- some fields are wrong
        # there

        z1 = np.minimum(self.z1,self.z()[-2]-1e-8)
        z2 = np.minimum(self.z2,self.z()[-2]-1e-8)

        z1 = np.maximum(z1,self.z()[1])
        z2 = np.maximum(z2,self.z()[1])

        i = np.argmax(self.z()>=z1)
        j = np.argmax(self.z()>=z2)

        return np.mean(data[:,i:j+1,...],1)

    # Function to compute the wall velocity. It's reconstructed from the mean
    # (liquid) velocity profile.

    def Uw(self):

        u = self.fua()[:2]
        r = self.r

        return u[0]-(u[1]-u[0])/(r[1]-r[0])*r[0]

    # Function to compute the actual shear velocity

    def Ustar(self):

        Uw = self.Uw()

        Uw1 = self.fua()[0]

        return (Uw1-Uw)/self.r[0]

    # Function to filter phase field data

    def phaseFilter(self,f,F):

        return f>F

    # Function to filter interface data

    def interfaceFilter(self,f,F1,F2):

        return (f>F1)*(f<=F2)
