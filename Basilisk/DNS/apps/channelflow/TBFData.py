# Class to procesess TBF data into meaningful averages

import numpy as np
import re, os, sys
import pandas as pd

class TBFData:


    Nfields = 74
    # Bulk Reynolds number

    Re = 5300.0

    # Shear Reynolds number based on the radius

    Re_tau = 360.0


    # Mass density (can be set with the setRho method)

    rho = 1.0

    # Initialize and load data from .npz file which is generated by TBFAverage

    def __init__(self, fileName):

        rawData = np.load(fileName)

        self.datay = rawData['y']
        self.data = rawData['data']

        if self.data.shape[1] != self.Nfields:
            raise ValueError('The shape of the averaged data array is incorrect.')

    # Function to set the length of the pipe
    # Set the mass density

    def setRho(self,rho):

        self.rho = rho

    # Named access to each column of the data

    ## f

    def f(self):
        return np.maximum(self.data[...,0],1e-16)

    ## df/dj

    def dfdx(self):
        return self.data[...,1]

    def dfdy(self):
        return self.data[...,2]

    def dfdz(self):
        return self.data[...,3] # zero

    ## f*ui

    def fux(self):
        return self.data[...,4]

    def fuy(self):
        return self.data[...,5]

    def fuz(self):
        return self.data[...,6] # zero

    ## f*ui*uj

    def fuxux(self):
        return self.data[...,7]

    def fuxuy(self):
        return self.data[...,8]

    def fuxuz(self):
        return self.data[...,9]

    def fuyuy(self):
        return self.data[...,10]

    def fuyuz(self):
        return self.data[...,11]

    def fuzuz(self):
        return self.data[...,12]

    ## d(f*ui)/dj

    def dfuxdx(self):
        return self.data[...,13]

    def dfuydx(self):
        return self.data[...,14]

    def dfuzdx(self):
        return self.data[...,15] # zero

    def dfuxdy(self):
        return self.data[...,16]

    def dfuydy(self):
        return self.data[...,17]

    def dfuzdy(self):
        return self.data[...,18] # zero

    def dfuxdz(self):
        return self.data[...,19] # zero

    def dfuydz(self):
        return self.data[...,20] # zero

    def dfuzdz(self):
        return self.data[...,21] # zero

    ## f*dui/dj

    def fduxdx(self):
        return self.data[...,22]

    def fduydx(self):
        return self.data[...,23]

    def fduzdx(self):
        return self.data[...,24] # zero

    def fduxdy(self):
        return self.data[...,25]

    def fduydy(self):
        return self.data[...,26]

    def fduzdy(self):
        return self.data[...,27] # zero

    def fduxdz(self):
        return self.data[...,28] # zero

    def fduydz(self):
        return self.data[...,29] # zero

    def fduzdz(self):
        return self.data[...,30] # zero

    ## d(f*ui*ui)/dj

    def dfuiuidx(self):
        return self.data[...,31]

    def dfuiuidy(self):
        return self.data[...,32]

    def dfuiuidz(self):
        return self.data[...,33] # zero

    ## d(f*ui*uj)/dj

    def dfuxujdj(self):
        return self.data[...,34]

    def dfuyujdj(self):
        return self.data[...,35]

    def dfuzujdj(self):
        return self.data[...,36]

    ## d(f*ui*ui*uj)/dj

    def dfuiuiujdj(self):
        return self.data[...,37]

    ## f*Q

    def fQ(self):
        return self.data[...,38]

    ## d(f*Q)/dj

    def dfQdx(self):
        return self.data[...,39]

    def dfQdy(self):
        return self.data[...,40]

    def dfQdz(self):
        return self.data[...,41] # zero

    ## d(f*Q*uj)/dj #1

    def dfQujdj1(self):
        return self.data[...,42]

    ## d(f*Q*uj)/dj #2

    def dfQujdj2(self):
        return self.data[...,43]

    ## d(f*nu*ui*Sij)/dj #1

    def dfnuuiSijdj1(self):
            return self.data[...,44]

    ## d(f*nu*ui*Sij)/dj #2

    def dfnuuiSijdj2(self):
            return self.data[...,45]

    ## d(f*nu*Sij)/dj #1

    def dfnuSxjdj1(self):
            return self.data[...,46]

    def dfnuSyjdj1(self):
            return self.data[...,47]

    def dfnuSzjdj1(self):
            return self.data[...,48]

    ## d(f*nu*Sij)/dj #2

    def dfnuSxjdj2(self):
            return self.data[...,49]

    def dfnuSyjdj2(self):
            return self.data[...,50]

    def dfnuSzjdj2(self):
            return self.data[...,51]

    ## f*nu*Sij

    def fnuSxx(self):
        return self.data[...,52]

    def fnuSxy(self):
        return self.data[...,53]

    def fnuSxz(self):
        return self.data[...,54] # zero

    def fnuSyx(self):
        return self.fnuSxy()

    def fnuSyy(self):
        return self.data[...,55]

    def fnuSyz(self):
        return self.data[...,56] # zero

    def fnuSzx(self):
        return self.fnuSxz()

    def fnuSzy(self):
        return self.fnuSyz()

    def fnuSzz(self):
        return self.data[...,57] # zero

    ## f*nu*Sij*dui/dj

    def fnuSijduidj(self):
        return self.data[...,58]

    ## f*Tij

    def fTxx(self):
        return self.data[...,59]

    def fTxy(self):
        return self.data[...,60]

    def fTxz(self):
        return self.data[...,61] # zero

    def fTyx(self):
        return self.fTxy()

    def fTyy(self):
        return self.data[...,62]

    def fTyz(self):
        return self.data[...,63] # zero

    def fTzx(self):
        return self.fTxz()

    def fTzy(self):
        return self.fTyz()

    def fTzz(self):
        return self.data[...,64] # zero

    ## rho*Tij*dG/dj

    def rhoTxjdGdj(self):
        return self.data[...,65]

    def rhoTyjdGdj(self):
        return self.data[...,66]

    def rhoTzjdGdj(self):
        return self.data[...,67]

    ## rho*Tij*dG/dj*ui

    def rhoTijdGdjui(self):
        return self.data[...,68]

    ## f*si

    def fsx(self):
        return self.data[...,69]

    def fsy(self):
        return self.data[...,70]

    def fsz(self):
        return self.data[...,71] # zero

    ## f*ui*si

    def fuisi(self):
        return self.data[...,72]

    ## f*f

    def ff(self):
        return self.data[...,73]

    # Derived quantities


    def y(self):
        return self.datay

    def rmsf(self):
        return np.sqrt(self.ff() - self.f()**2)

    def rmsfux(self):
        return np.sqrt(self.fuxux() - self.fux()**2)

    def rmsfuy(self):
        return np.sqrt(self.fuyuy() - self.fuy()**2)

    def rmsfuz(self):
        return np.sqrt(self.fuzuz() - self.fuz()**2)

    def fk(self):
        return 0.5*(self.rmsfux()**2 + self.rmsfuy()**2 + self.rmsfuz()**2)

    def convection(self):

        f = self.f()

        fux = self.fux()
        fuy = self.fuy()
        fuz = self.fuz()

        fuiui = self.fuxux()+self.fuyuy()+self.fuzuz()

        dfdx = self.dfdx()
        dfdy = self.dfdy()
        dfdz = self.dfdz()

        dfuxdx = self.dfuxdx()
        dfuydx = self.dfuydx()
        dfuzdx = self.dfuzdx()
        dfuxdy = self.dfuxdy()
        dfuydy = self.dfuydy()
        dfuzdy = self.dfuzdy()
        dfuxdz = self.dfuxdz()
        dfuydz = self.dfuydz()
        dfuzdz = self.dfuzdz()

        dfuiuidx = self.dfuiuidx()
        dfuiuidy = self.dfuiuidy()
        dfuiuidz = self.dfuiuidz()

        return -1/2*(
            1.0/f    * (fux*dfuiuidx + fuy*dfuiuidy + fuz*dfuiuidz) \
          + 1.0/f    * (dfuxdx + dfuydy + dfuzdz) * fuiui \
          - 1.0/f**2 * (fux*dfdx + fuy*dfdy + fuz*dfdz) * fuiui \
          - 1.0/f**2 * (fux*fux + fuy*fuy + fuz*fuz) * (dfuxdx + dfuydy + dfuzdz) \
          - 2.0/f**2 * (fux*fux*dfuxdx + fux*fuy*dfuxdy + fux*fuz*dfuxdz + fuy*fux*dfuydx + fuy*fuy*dfuydy + fuy*fuz*dfuydz + fuz*fux*dfuzdx + fuz*fuy*dfuzdy + fuz*fuz*dfuzdz) \
          + 2.0/f**3 * (fux*fux + fuy*fuy + fuz*fuz) * (fux*dfdx + fuy*dfdy + fuz*dfdz) \
        ) / self.Re_tau

    def production(self):

        f = self.f()

        fux = self.fux()
        fuy = self.fuy()
        fuz = self.fuz()

        fuxux = self.fuxux()
        fuxuy = self.fuxuy()
        fuxuz = self.fuxuz()
        fuyux = self.fuxuy()
        fuyuy = self.fuyuy()
        fuyuz = self.fuyuz()
        fuzux = self.fuxuz()
        fuzuy = self.fuyuz()
        fuzuz = self.fuzuz()

        dfdx = self.dfdx()
        dfdy = self.dfdy()
        dfdz = self.dfdz()

        dfuxdx = self.dfuxdx()
        dfuydx = self.dfuydx()
        dfuzdx = self.dfuzdx()
        dfuxdy = self.dfuxdy()
        dfuydy = self.dfuydy()
        dfuzdy = self.dfuzdy()
        dfuxdz = self.dfuxdz()
        dfuydz = self.dfuydz()
        dfuzdz = self.dfuzdz()

        return -(
            (fuxux - fux*fux/f) * (dfuxdx/f - fux*dfdx/f**2) \
          + (fuxuy - fux*fuy/f) * (dfuxdy/f - fux*dfdy/f**2) \
          + (fuxuz - fux*fuz/f) * (dfuxdz/f - fux*dfdz/f**2) \
          + (fuyux - fuy*fux/f) * (dfuydx/f - fuy*dfdx/f**2) \
          + (fuyuy - fuy*fuy/f) * (dfuydy/f - fuy*dfdy/f**2) \
          + (fuyuz - fuy*fuz/f) * (dfuydz/f - fuy*dfdz/f**2) \
          + (fuzux - fuz*fux/f) * (dfuzdx/f - fuz*dfdx/f**2) \
          + (fuzuy - fuz*fuy/f) * (dfuzdy/f - fuz*dfdy/f**2) \
          + (fuzuz - fuz*fuz/f) * (dfuzdz/f - fuz*dfdz/f**2) \
        ) / self.Re_tau

    def transport(self):

        f = self.f()

        fux = self.fux()
        fuy = self.fuy()
        fuz = self.fuz()

        fuxux = self.fuxux()
        fuxuy = self.fuxuy()
        fuxuz = self.fuxuz()
        fuyux = self.fuxuy()
        fuyuy = self.fuyuy()
        fuyuz = self.fuyuz()
        fuzux = self.fuxuz()
        fuzuy = self.fuyuz()
        fuzuz = self.fuzuz()

        fuiui = self.fuxux()+self.fuyuy()+self.fuzuz()

        dfdx = self.dfdx()
        dfdy = self.dfdy()
        dfdz = self.dfdz()

        dfuiuiujdj = self.dfuiuiujdj()

        dfuxdx = self.dfuxdx()
        dfuydx = self.dfuydx()
        dfuzdx = self.dfuzdx()
        dfuxdy = self.dfuxdy()
        dfuydy = self.dfuydy()
        dfuzdy = self.dfuzdy()
        dfuxdz = self.dfuxdz()
        dfuydz = self.dfuydz()
        dfuzdz = self.dfuzdz()

        dfuiuidx = self.dfuiuidx()
        dfuiuidy = self.dfuiuidy()
        dfuiuidz = self.dfuiuidz()

        dfuxujdj = self.dfuxujdj()
        dfuyujdj = self.dfuyujdj()
        dfuzujdj = self.dfuzujdj()

        return -(
            0.5*dfuiuiujdj \
          + 1.0/f**2 * (fux*fux + fuy*fuy + fuz*fuz) * (dfuxdx + dfuydy + dfuzdz) \
          + 2.0/f**2 * (fux*fux*dfuxdx + fux*fuy*dfuxdy + fux*fuz*dfuxdz + fuy*fux*dfuydx + fuy*fuy*dfuydy + fuy*fuz*dfuydz + fuz*fux*dfuzdx + fuz*fuy*dfuzdy + fuz*fuz*dfuzdz) \
          - 2.0/f**3 * (fux*fux + fuy*fuy + fuz*fuz) * (fux*dfdx + fuy*dfdy + fuz*dfdz) \
          - 1.0/f    * (fux*dfuxujdj + fuy*dfuyujdj + fuz*dfuzujdj) \
          - 1.0/f    * (fuxux*dfuxdx + fuxuy*dfuxdy + fuxuz*dfuxdz + fuyux*dfuydx + fuyuy*dfuydy + fuyuz*dfuydz + fuzux*dfuzdx + fuzuy*dfuzdy + fuzuz*dfuzdz) \
          + 2.0/f**2 * (fuxux*fux*dfdx + fuyux*fuy*dfdx + fuzux*fuz*dfdx + fuxuy*fux*dfdy + fuyuy*fuy*dfdy + fuzuy*fuz*dfdy + fuxuz*fux*dfdz + fuyuz*fuy*dfdz + fuzuz*fuz*dfdz) \
          - 0.5/f    * (fux*dfuiuidx + fuy*dfuiuidy + fuz*dfuiuidz) \
          - 0.5/f    * (dfuxdx + dfuydy + dfuzdz) * fuiui \
          + 0.5/f**2 * (fux*dfdx + fuy*dfdy + fuz*dfdz) * fuiui \
        ) / self.Re_tau

    def pressureDiffusion(self, mode=1):

        f = self.f()

        fux = self.fux()
        fuy = self.fuy()
        fuz = self.fuz()

        fQ = self.fQ()

        dfdx = self.dfdx()
        dfdy = self.dfdy()
        dfdz = self.dfdz()

        dfuxdx = self.dfuxdx()
        dfuydy = self.dfuydy()
        dfuzdz = self.dfuzdz()

        dfQdx = self.dfQdx()
        dfQdy = self.dfQdy()
        dfQdz = self.dfQdz()

        if mode == 1:
            dfQujdj = self.dfQujdj1()
        elif mode == 2:
            dfQujdj = self.dfQujdj2()
        else:
            raise ValueError('Invalid pressure diffusion mode ' + Szy(mode))

        return -(
            dfQujdj \
          - 1.0/f    * (dfuxdx + dfuydy + dfuzdz) * fQ  \
          - 1.0/f    * (dfQdx*fux + dfQdy*fuy + dfQdz*fuz) \
          + 1.0/f**2 * (dfdx*fux + dfdy*fuy + dfdz*fuz) * fQ \
        ) / self.Re_tau

    def viscousDiffusion(self, mode=1):

        f = self.f()

        fux = self.fux()
        fuy = self.fuy()
        fuz = self.fuz()

        fnuSxx = self.fnuSxx()
        fnuSxy = self.fnuSxy()
        fnuSxz = self.fnuSxz()
        fnuSyx = self.fnuSyx()
        fnuSyy = self.fnuSyy()
        fnuSyz = self.fnuSyz()
        fnuSzx = self.fnuSzx()
        fnuSzy = self.fnuSzy()
        fnuSzz = self.fnuSzz()

        dfdx = self.dfdx()
        dfdy = self.dfdy()
        dfdz = self.dfdz()

        dfuxdx = self.dfuxdx()
        dfuydx = self.dfuydx()
        dfuzdx = self.dfuzdx()
        dfuxdy = self.dfuxdy()
        dfuydy = self.dfuydy()
        dfuzdy = self.dfuzdy()
        dfuxdz = self.dfuxdz()
        dfuydz = self.dfuydz()
        dfuzdz = self.dfuzdz()

        if mode == 1:
            dfuinuSijdj = self.dfnuuiSijdj1()
            dfnuSxjdj = self.dfnuSxjdj1()
            dfnuSyjdj = self.dfnuSyjdj1()
            dfnuSzjdj = self.dfnuSzjdj1()
        elif mode == 2:
            dfuinuSijdj = self.dfnuuiSijdj2()
            dfnuSxjdj = self.dfnuSxjdj2()
            dfnuSyjdj = self.dfnuSyjdj2()
            dfnuSzjdj = self.dfnuSzjdj2()
        else:
            raise ValueError('Invalid viscous diffusion mode ' + Szy(mode))

        return 2.0*(
            dfuinuSijdj \
          - 1.0/f *    (fux*dfnuSxjdj + fuy*dfnuSyjdj + fuz*dfnuSzjdj) \
          - 1.0/f *    (fnuSxx*dfuxdx + fnuSxy*dfuxdy + fnuSxz*dfuxdz + fnuSyx*dfuydx + fnuSyy*dfuydy + fnuSyz*dfuydz + fnuSzx*dfuzdx + fnuSzy*dfuzdy + fnuSzz*dfuzdz) \
          + 1.0/f**2 * (fux*fnuSxx*dfdx + fux*fnuSxy*dfdy + fux*fnuSxz*dfdz + fuy*fnuSyx*dfdx + fuy*fnuSyy*dfdy + fuy*fnuSyz*dfdz + fuz*fnuSzx*dfdx + fuz*fnuSzy*dfdy + fuz*fnuSzz*dfdz) \
        ) / self.Re_tau

    def dissipation(self):

        f = self.f()

        fduxdx = self.fduxdx()
        fduydx = self.fduydx()
        fduzdx = self.fduzdx()
        fduxdy = self.fduxdy()
        fduydy = self.fduydy()
        fduzdy = self.fduzdy()
        fduxdz = self.fduxdz()
        fduydz = self.fduydz()
        fduzdz = self.fduzdz()

        fnuSxx = self.fnuSxx()
        fnuSxy = self.fnuSxy()
        fnuSxz = self.fnuSxz()
        fnuSyx = self.fnuSyx()
        fnuSyy = self.fnuSyy()
        fnuSyz = self.fnuSyz()
        fnuSzx = self.fnuSzx()
        fnuSzy = self.fnuSzy()
        fnuSzz = self.fnuSzz()

        fnuSijduidj = self.fnuSijduidj()

        return 2.0*(
            fnuSijduidj
          - 1.0/f * (fnuSxx*fduxdx + fnuSxy*fduxdy + fnuSxz*fduxdz + fnuSyx*fduydx + fnuSyy*fduydy + fnuSyz*fduydz + fnuSzx*fduzdx + fnuSzy*fduzdy + fnuSzz*fduzdz)
        ) / self.Re_tau

    def interface1(self):

        f = self.f()

        fux = self.fux()
        fuy = self.fuy()
        fuz = self.fuz()

        rhoTxjdGdj = self.rhoTxjdGdj()
        rhoTyjdGdj = self.rhoTyjdGdj()
        rhoTzjdGdj = self.rhoTzjdGdj()

        rhoTijdGdjui = self.rhoTijdGdjui()

        return (
            1.0/f * (fux*rhoTxjdGdj + fuy*rhoTyjdGdj + fuz*rhoTzjdGdj) \
          - rhoTijdGdjui \
        ) / self.Re_tau

    def interface2(self):

        f = self.f()
        fux = self.fux()
        fuy = self.fuy()
        fuz = self.fuz()

        fTxx = self.fTxx()
        fTxy = self.fTxy()
        fTxz = self.fTxz()
        fTyx = self.fTyx()
        fTyy = self.fTyy()
        fTyz = self.fTyz()
        fTzx = self.fTzx()
        fTzy = self.fTzy()
        fTzz = self.fTzz()

        dfdx = self.dfdx()
        dfdy = self.dfdy()
        dfdz = self.dfdz()

        dfuxdx = self.dfuxdx()
        dfuydx = self.dfuydx()
        dfuzdx = self.dfuzdx()
        dfuxdy = self.dfuxdy()
        dfuydy = self.dfuydy()
        dfuzdy = self.dfuzdy()
        dfuxdz = self.dfuxdz()
        dfuydz = self.dfuydz()
        dfuzdz = self.dfuzdz()

        fduxdx = self.fduxdx()
        fduydx = self.fduydx()
        fduzdx = self.fduzdx()
        fduxdy = self.fduxdy()
        fduydy = self.fduydy()
        fduzdy = self.fduzdy()
        fduxdz = self.fduxdz()
        fduydz = self.fduydz()
        fduzdz = self.fduzdz()

        return (
            - 1.0/f    * (fTxx*fduxdx + fTxy*fduxdy + fTxz*fduxdz + fTyx*fduydx + fTyy*fduydy + fTyz*fduydz + fTzx*fduzdx + fTzy*fduzdy + fTzz*fduzdz) \
            + 1.0/f    * (fTxx*dfuxdx + fTxy*dfuxdy + fTxz*dfuxdz + fTyx*dfuydx + fTyy*dfuydy + fTyz*dfuydz + fTzx*dfuzdx + fTzy*dfuzdy + fTzz*dfuzdz) \
            - 1.0/f**2 * (fTxx*fux*dfdx + fTxy*fux*dfdy + fTxz*fux*dfdz + fTyx*fuy*dfdx + fTyy*fuy*dfdy + fTyz*fuy*dfdz + fTzx*fuz*dfdx + fTzy*fuz*dfdy + fTzz*fuz*dfdz) \
        ) / self.Re_tau

    def surfaceTension(self):

        f = self.f()

        fux = self.fux()
        fuy = self.fuy()
        fuz = self.fuz()

        fuisi = self.fuisi()

        fsx = self.fsx()
        fsy = self.fsy()
        fsz = self.fsz()

        return (
            fuisi
          - 1.0/f * (fux*fsx + fuy*fsy + fuz*fsz)
        ) / self. Re_tau

    def divergence(self):

        f = self.f()

        dfuxdx = self.dfuxdx()
        dfuydy = self.dfuydy()
        dfuzdz = self.dfuzdz()

        return (dfuxdx + dfuydy + dfuzdz)

    def budgetSum(self, modepd=1, modevd=1):

        return \
          + self.convection() \
          + self.production() \
          + self.transport() \
          - self.dissipation() \
          + self.pressureDiffusion(modepd) \
          + self.viscousDiffusion(modevd) \
          + self.interface1() \
          + self.interface2() \
          + self.surfaceTension()

    # Function to average over given axial range



    # Function to compduze the wall velocity. It's reconSzyucted from the mean
    # (liquid) velocity profile.

    def Uw(self):

        u = self.fux()[:2]
        r = self.r

        return u[0]-(u[1]-u[0])/(r[1]-r[0])*r[0]

    # Function to compute the actual shear velocity

    def USzxr(self):

        Uw = self.Uw()

        Uw1 = self.fux()[0]

        return (Uw1-Uw)/self.r[0]

    # Function to filter phase field data

    def phaseFilter(self,f,F):

        return f>F

    # Function to filter interface data

    def interfaceFilter(self,f,F1,F2):

        return (f>F1)*(f<=F2)
