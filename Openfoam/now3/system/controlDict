/*--------------------------------*- C++ -*----------------------------------*\
  =========                 |
  \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox
   \\    /   O peration     | Website:  https://openfoam.org
    \\  /    A nd           | Version:  dev
     \\/     M anipulation  |
\*---------------------------------------------------------------------------*/
FoamFile
{
    version     2.0;
    format      ascii;
    class       dictionary;
    location    "system";
    object      controlDict;
}
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

application     interFoam;

startFrom       startTime;

startTime       0;

stopAt          endTime;

endTime         1000;

deltaT          0.0001;

writeControl    adjustableRunTime;

writeInterval   100;

purgeWrite      0;

writeFormat     ascii;

writePrecision  6;

writeCompression off;

timeFormat      general;

timePrecision   6;

runTimeModifiable yes;

adjustTimeStep  yes;

maxCo           1;
maxAlphaCo      1;

maxDeltaT       1;


libs
(
"libturbulenceDamping.so"
);



functions

{

  yplus
  {
    type yPlus;
    libs ("libfieldFunctionObjects.so");
    writeControl writeTime;
    log true;
  }

  turbulenceFields1
  {
    type        turbulenceFields;
    libs        ("libfieldFunctionObjects.so");
    fields
    (
      R //Reynolds stress tensor
      //k //Turbulent kinetic energy
      nuEff
      devReff //Deviatoric stress tensor
      // epsilon //Turbulent kinetic energyu dissipation rate
    );

    executeControl  writeTime;
    executeInterval -1;
    writeControl    writeTime;
    writeInterval   -1;

  }
  
  fieldAverage
      {
          type            fieldAverage;
          functionObjectLibs ("libfieldFunctionObjects.so");
          enabled         true;
          outputControl   outputTime;
          fields
          (
              U
              {
                  mean        on;
                  prime2Mean  on;
                  base        time;
              }
          );

          executeControl  writeTime;
          executeInterval -1;
          writeControl    writeTime;
          writeInterval   -1;
      }
  


}
;

// ************************************************************************* //
